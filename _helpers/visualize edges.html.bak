<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edge Visualization with Grid and 2D Grid Bitmap</title>
    <style>
        /* Style for the canvas */
        #edgeCanvas {
            border: 1px solid #000;
        }
    </style>
</head>
<body>
    <canvas id="edgeCanvas"></canvas>

    <script>
        // Custom Point class
        class Point {
            constructor(x, y) {
                this.x = x;
                this.y = y;
            }
        }

        // Define your list of edges as an array of objects with start and end coordinates
        var edges = [
{ start: new Point(1, 1.5), end: new Point(1.5, 2) },
{ start: new Point(1.5, 2), end: new Point(2, 1.5) },
{ start: new Point(2, 1.5), end: new Point(1.5, 1) },
{ start: new Point(1.5, 1), end: new Point(1, 1.5) },
            // Add more edges as needed
        ];

        // Define your 2D grid bitmap as a 2D boolean array
        var gridBitmap = [
[ true, true, true ],
[ true, true, true ],
            // Add more rows and columns as needed
        ];

        // Function to find the maximum coordinates in your data
        function findMaxCoords(edges) {
            let maxX = -Infinity;
            let maxY = -Infinity;
            for (const edge of edges) {
                maxX = Math.max(maxX, edge.start.x, edge.end.x);
                maxY = Math.max(maxY, edge.start.y, edge.end.y);
            }
            return { maxX, maxY };
        }

        // Get the canvas element and its context
        var canvas = document.getElementById('edgeCanvas');
        var ctx = canvas.getContext('2d');

        // Calculate the maximum data values
        var maxCoords = findMaxCoords(edges);

        // Define grid spacing and increased resolution (adjust as needed)
        var gridSpacing = 20;
        var resolutionFactor = 2; // Increase resolution by a factor of 2

        // Set the canvas dimensions based on grid spacing and resolution
        canvas.width = (maxCoords.maxX + 1) * gridSpacing * resolutionFactor;
        canvas.height = (maxCoords.maxY + 1) * gridSpacing * resolutionFactor;

        // Function to generate a random dark color
        function getRandomDarkColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

// Function to draw an edge with increased resolution, and a random dark color
function drawEdge(edge, edgeIndex) {
    var color = getRandomDarkColor();
    ctx.beginPath();
    
    // Calculate the center coordinates of the edge
    var centerX = (edge.start.x + edge.end.x) / 2;
    var centerY = (edge.start.y + edge.end.y) / 2;
    
    ctx.moveTo(edge.start.x * gridSpacing * resolutionFactor, edge.start.y * gridSpacing * resolutionFactor);
    ctx.lineTo(edge.end.x * gridSpacing * resolutionFactor, edge.end.y * gridSpacing * resolutionFactor);
    ctx.strokeStyle = color;
    ctx.stroke();

    // Draw the edge index text in the center of the edge
    ctx.fillStyle = color;
    ctx.fillText('' + (edgeIndex + 1), centerX * gridSpacing * resolutionFactor, centerY * gridSpacing * resolutionFactor);
}



        // Function to draw a grid with coordinates and increased resolution
        function drawGrid() {
            ctx.strokeStyle = '#ccc';

            // Horizontal grid lines
            for (var y = 0; y <= maxCoords.maxY; y++) {
                ctx.beginPath();
                ctx.moveTo(0, y * gridSpacing * resolutionFactor + gridSpacing / 2 * resolutionFactor);
                ctx.lineTo(canvas.width, y * gridSpacing * resolutionFactor + gridSpacing / 2 * resolutionFactor);
                ctx.stroke();

                // Display coordinates on the left side of the canvas
                ctx.fillStyle = '#000';
                ctx.fillText('Y=' + y, 5, y * gridSpacing * resolutionFactor + gridSpacing / 2 * resolutionFactor - 5);
            }

            // Vertical grid lines
            for (var x = 0; x <= maxCoords.maxX; x++) {
                ctx.beginPath();
                ctx.moveTo(x * gridSpacing * resolutionFactor + gridSpacing / 2 * resolutionFactor, 0);
                ctx.lineTo(x * gridSpacing * resolutionFactor + gridSpacing / 2 * resolutionFactor, canvas.height);
                ctx.stroke();

                // Display coordinates above the canvas
                ctx.fillStyle = '#000';
                ctx.fillText('X=' + x, x * gridSpacing * resolutionFactor + gridSpacing / 2 * resolutionFactor + 5, 15);
            }
        }

        // Function to draw the 2D grid bitmap with increased resolution
        function drawGridBitmap(bitmap) {
            ctx.fillStyle = 'rgba(0, 0, 255, 0.5)'; // Blue with transparency
            for (var row = 0; row < bitmap.length; row++) {
                for (var col = 0; col < bitmap[row].length; col++) {
                    if (bitmap[row][col]) {
                        ctx.fillRect(col * gridSpacing * resolutionFactor, row * gridSpacing * resolutionFactor, gridSpacing * resolutionFactor, gridSpacing * resolutionFactor);
                    }
                }
            }
        }

        // Draw the grid, 2D grid bitmap, and edges
        drawGrid();
        drawGridBitmap(gridBitmap);
		edgeIndex = 0;
        edges.forEach(function(edge) {
            drawEdge(edge, edgeIndex);
			edgeIndex++;
        });
    </script>
</body>
</html>
